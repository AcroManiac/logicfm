// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddNewHandlerFunc turns a function with the right signature into a add new handler
type AddNewHandlerFunc func(AddNewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddNewHandlerFunc) Handle(params AddNewParams) middleware.Responder {
	return fn(params)
}

// AddNewHandler interface for that can handle valid add new params
type AddNewHandler interface {
	Handle(AddNewParams) middleware.Responder
}

// NewAddNew creates a new http.Handler for the add new operation
func NewAddNew(ctx *middleware.Context, handler AddNewHandler) *AddNew {
	return &AddNew{Context: ctx, Handler: handler}
}

/*AddNew swagger:route POST /rule/add/{musrvId} rule addNew

build rule and query structures

Endpoint is used to generate microservice rule and query structures


*/
type AddNew struct {
	Context *middleware.Context
	Handler AddNewHandler
}

func (o *AddNew) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddNewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ahamtat/logicfm/pkg/models"
)

// AddNewRuleCreatedCode is the HTTP code returned for type AddNewRuleCreated
const AddNewRuleCreatedCode int = 201

/*AddNewRuleCreated Created

swagger:response addNewRuleCreated
*/
type AddNewRuleCreated struct {
}

// NewAddNewRuleCreated creates AddNewRuleCreated with default headers values
func NewAddNewRuleCreated() *AddNewRuleCreated {

	return &AddNewRuleCreated{}
}

// WriteResponse to the client
func (o *AddNewRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

/*AddNewRuleDefault error

swagger:response addNewRuleDefault
*/
type AddNewRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddNewRuleDefault creates AddNewRuleDefault with default headers values
func NewAddNewRuleDefault(code int) *AddNewRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &AddNewRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add new rule default response
func (o *AddNewRuleDefault) WithStatusCode(code int) *AddNewRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add new rule default response
func (o *AddNewRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add new rule default response
func (o *AddNewRuleDefault) WithPayload(payload *models.Error) *AddNewRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add new rule default response
func (o *AddNewRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddNewRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"../internal/models"
)

// NewAddNewRuleParams creates a new AddNewRuleParams object
// with the default values initialized.
func NewAddNewRuleParams() *AddNewRuleParams {
	var ()
	return &AddNewRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddNewRuleParamsWithTimeout creates a new AddNewRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddNewRuleParamsWithTimeout(timeout time.Duration) *AddNewRuleParams {
	var ()
	return &AddNewRuleParams{

		timeout: timeout,
	}
}

// NewAddNewRuleParamsWithContext creates a new AddNewRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddNewRuleParamsWithContext(ctx context.Context) *AddNewRuleParams {
	var ()
	return &AddNewRuleParams{

		Context: ctx,
	}
}

// NewAddNewRuleParamsWithHTTPClient creates a new AddNewRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddNewRuleParamsWithHTTPClient(client *http.Client) *AddNewRuleParams {
	var ()
	return &AddNewRuleParams{
		HTTPClient: client,
	}
}

/*AddNewRuleParams contains all the parameters to send to the API endpoint
for the add new rule operation typically these are written to a http.Request
*/
type AddNewRuleParams struct {

	/*MusrvID*/
	MusrvID int64
	/*Rule*/
	Rule *models.Rule

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add new rule params
func (o *AddNewRuleParams) WithTimeout(timeout time.Duration) *AddNewRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add new rule params
func (o *AddNewRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add new rule params
func (o *AddNewRuleParams) WithContext(ctx context.Context) *AddNewRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add new rule params
func (o *AddNewRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add new rule params
func (o *AddNewRuleParams) WithHTTPClient(client *http.Client) *AddNewRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add new rule params
func (o *AddNewRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMusrvID adds the musrvID to the add new rule params
func (o *AddNewRuleParams) WithMusrvID(musrvID int64) *AddNewRuleParams {
	o.SetMusrvID(musrvID)
	return o
}

// SetMusrvID adds the musrvId to the add new rule params
func (o *AddNewRuleParams) SetMusrvID(musrvID int64) {
	o.MusrvID = musrvID
}

// WithRule adds the rule to the add new rule params
func (o *AddNewRuleParams) WithRule(rule *models.Rule) *AddNewRuleParams {
	o.SetRule(rule)
	return o
}

// SetRule adds the rule to the add new rule params
func (o *AddNewRuleParams) SetRule(rule *models.Rule) {
	o.Rule = rule
}

// WriteToRequest writes these params to a swagger request
func (o *AddNewRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param musrvId
	if err := r.SetPathParam("musrvId", swag.FormatInt64(o.MusrvID)); err != nil {
		return err
	}

	if o.Rule != nil {
		if err := r.SetBodyParam(o.Rule); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
